%{
open GuardedCommands.Frontend.AST
%}

%token <int> INT
%token <bool> BOOL
%token <string> STRING
%token <string> NAME
%token DREF AOF
%token ITYP BTYP
%token LP LCP LSP RP RCP RSP
%token IF FI DO OD BEGIN END FUN PROC
%token COMMA COLON SEMI BAR TO
%token NEG PLUS MINUS TIMES DIV MOD AND OR EQ LE LT GE GT NEQ
%token PRINT ASG SKIP ABORT RET
%token EOF
%token HIGH

%left ASG
%left OR
%left AND
%nonassoc NEG
%left EQ LE LT GT GE NEQ
%left PLUS MINUS
%left TIMES DIV MOD
%left COMMA

%start Main Prog 
%type <Exp> Exp
%type <Exp list> ExpL ExpList
%type <Access> Access
%type <Access list> AccessL
%type <(Exp * Stm list) list> GCList
%type <GuardedCommand> GuardedCommand
%type <Stm list> StmList StmL
%type <Stm> Stm
%type <Typ> BasicTyp Typ
%type <Dec> Dec
%type <Dec list> DecL DecList
%type <Program> Main  Prog 
%%

Main:
   Prog EOF                            { $1 }

Prog:
    BEGIN DecList SEMI StmL END        { P($2, $4) }
  | BEGIN StmL END                     { P([], $2) }   

BasicTyp:
    BTYP                              { BTyp }
  | ITYP                              { ITyp } 

Typ:
    BasicTyp                          { $1 }
    | BasicTyp LSP INT RSP            { ATyp($1,Some($3)) }
    | BasicTyp LSP RSP                { ATyp($1,None) }

Dec: 
    NAME COLON Typ { VarDec($3,$1) }
    | FUN NAME LP DecL RP COLON Typ EQ Stm { FunDec(Some($7),$2,$4,$9) }
    | PROC NAME LP DecL RP EQ Stm          { FunDec(None,$2,$4,$7) }
    | NAME COLON DREF Typ                  { VarDec(PTyp($4), $1) }

DecL: 
                                      { [] }
   | DecList                          { $1 }

DecList: 
   | Dec                              { [$1] }
   | Dec COMMA DecList                { $1 :: $3 }

Access:
     NAME                             { AVar $1 }
   | NAME LSP Exp RSP                 { AIndex(AVar($1),$3) }
   | NAME DREF                        { AVar $1 }

AccessL:
  | Access                            { [$1] }
  | AccessL COMMA Access              { $3 :: $1 }

Stm:
    PRINT Exp                         { PrintLn $2 }
  | AccessL ASG ExpList               { Ass($1,$3) }
  | SKIP                              { Do (GC []) }
  | ABORT                             { Alt (GC []) } 
  | LCP StmL  RCP                     { Block([], $2) } 
  | LCP DecL SEMI StmL RCP            { Block($2, $4) }
  | IF GuardedCommand FI              { Alt $2 }
  | DO GuardedCommand OD              { Do $2  }
  | RET Exp                           { Return(Some($2)) }
  | RET                               { Return(None) }
  | NAME LP ExpL RP                   { Call($1, $3) }


StmL:
                                      { [] } 
  | StmList                           { $1 }    

StmList:
  | Stm                               { [$1] }
  | Stm SEMI StmList                  { $1 :: $3 } 

GuardedCommand:
                                      { GC [] }
  | GCList                            { GC $1 }

GCList:
    Exp TO StmL                       { [($1,$3)]   }
  | Exp TO StmL BAR GCList	   		    { ($1,$3)::$5 }

Exp:
    Access                           { Access $1 }
  | INT                              { N $1 }
  | BOOL                             { B $1 }       
  | LP Exp RP                        { $2 } 
  | MINUS Exp                        { Apply("-", [$2])}
  | NEG Exp                          { Apply("!", [$2])}
  | Exp TIMES Exp                    { Apply("*", [$1; $3])}
  | Exp PLUS Exp                     { Apply("+", [$1; $3])}
  | Exp MINUS Exp                    { Apply("-", [$1; $3])}
  | Exp DIV Exp                      { Apply("/", [$1; $3])}
  | Exp MOD Exp                      { Apply("%", [$1; $3])}
  | Exp AND Exp                      { Apply("&&", [$1; $3])}
  | Exp OR Exp                       { Apply("||", [$1; $3])}
  | Exp EQ Exp                       { Apply("=", [$1; $3])}
  | Exp GE Exp                       { Apply(">=", [$1; $3])}
  | Exp LE Exp                       { Apply("<=", [$1; $3])}
  | Exp GT Exp                       { Apply(">", [$1; $3])}
  | Exp LT Exp                       { Apply("<", [$1; $3])}
  | Exp NEQ Exp                      { Apply("<>", [$1; $3])}
  | NAME LP ExpL RP                  { Apply($1, $3) } 
  | AOF Access                       { Access $2 }

ExpL:
                                      { [] }
   | ExpList                          { (List.rev $1) }

ExpList: 
   | Exp                              { [$1] }
   | ExpList COMMA Exp                { $3 :: $1 }